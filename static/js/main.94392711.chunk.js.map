{"version":3,"sources":["logo.svg","Algorithms/mergeSort.js","components/Sorting-Visualizer/sortingVisualizer.jsx","components/View-Algorithm/viewAlgorithm.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","merge","mainArray","p","q","r","auxiliaryArray","animations","k","i","j","push","mergeSort","array","length","slice","mergeSortHelper","Math","floor","SortingVisualizer","props","state","arrayIsSorted","currentlySorting","this","resetArray","randomIntFromInterval","setState","document","querySelectorAll","forEach","eachBar","style","backgroundColor","arrayValueBars","barOneIndex","barTwoIndex","barOneStyle","barTwoStyle","color","id","setTimeout","newHeight","height","className","map","value","index","key","onClick","mergeSortVisualizer","Component","min","max","random","ViewAlgorithm","disabled","width","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","algorithmName","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94392711.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const mergeSortHelper = (mainArray, p, r, auxiliaryArray, animations) => {\r\n\tif (p !== r) {\r\n\t\t// Divide\r\n\t\tconst q = Math.floor((p + r) / 2);\r\n\r\n\t\t// Conquer\r\n\t\tmergeSortHelper(auxiliaryArray, p, q, mainArray, animations);\r\n\t\tmergeSortHelper(auxiliaryArray, q + 1, r, mainArray, animations);\r\n\r\n\t\t// Merge\r\n\t\tmerge(mainArray, p, q, r, auxiliaryArray, animations);\r\n\r\n\t\t// console.log(array);\r\n\t}\r\n\treturn;\r\n};\r\n\r\nconst mergeSort = (array) => {\r\n\t// console.log('running merge sort');\r\n\tconst animations = [];\r\n\tif (array.length <= 1) return array;\r\n\tconst auxiliaryArray = array.slice();\r\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\treturn animations;\r\n};\r\n\r\nconst merge = (mainArray, p, q, r, auxiliaryArray, animations) => {\r\n\t// let lowHalf = [];\r\n\t// let highHalf = [];\r\n\t// let k = p;\r\n\t//\r\n\t// for (let i = 0; k <= q; i++, k++) {\r\n\t//     lowHalf[i] = array[k];\r\n\t// }\r\n\t// for (let j = 0; k <= r; j++, k++) {\r\n\t//     highHalf[j] = array[k];\r\n\t// }\r\n\r\n\tlet k = p;\r\n\tlet i = p;\r\n\tlet j = q + 1;\r\n\r\n\r\n\twhile (i <= q && j <= r) {\r\n\t\tanimations.push([i, j]);\r\n\t\tanimations.push([i, j]);\r\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n\t\t\tanimations.push([k, auxiliaryArray[i]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t} else {\r\n\t\t\tanimations.push([k, auxiliaryArray[j]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t}\r\n\r\n\twhile (i <= q) {\r\n\t\tanimations.push([i, i]);\r\n\t\tanimations.push([i, i]);\r\n\t\tanimations.push([k, auxiliaryArray[i]]);\r\n\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t}\r\n\r\n\twhile (j <= r) {\r\n\t\tanimations.push([j, j]);\r\n\t\tanimations.push([j, j]);\r\n\t\tanimations.push([k, auxiliaryArray[j]]);\r\n\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t}\r\n};\r\n\r\nexport default mergeSort;\r\n","/* eslint-disable indent */\r\nimport React, { Component } from 'react';\r\nimport mergeSort from '../../Algorithms/mergeSort';\r\nimport './sortingVisualizer.css';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      arrayIsSorted: false,\r\n      currentlySorting: false\r\n    };\r\n\r\n    this.currentlySorting = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 40; i++) {\r\n      array.push(randomIntFromInterval(15, 200));\r\n    }\r\n    this.setState({ array });\r\n    const arrayValueBars = document.querySelectorAll('.arrayValueBar');\r\n    arrayValueBars.forEach((eachBar) => {\r\n      eachBar.style.backgroundColor = 'gray';\r\n    });\r\n  }\r\n\r\n  mergeSortVisualizer() {\r\n    const animations = mergeSort(this.state.array);\r\n    // const newAnimations = [];\r\n    // for (const animation of animations) {\r\n    //   newAnimations.push(animation.comparison);\r\n    //   newAnimations.push(animation.comparison);\r\n    //   newAnimations.push(animation.swap);\r\n    // }\r\n    this.currentlySorting = true;\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayValueBars = document.querySelectorAll('.arrayValueBar');\r\n      const isColorChange = i % 3 !== 2;\r\n\r\n      if (isColorChange) {\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayValueBars[barOneIndex].style;\r\n        const barTwoStyle = arrayValueBars[barTwoIndex].style;\r\n        const color = i % 3 === 0 ? 'pink' : 'turquoise';\r\n        this.id = setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 25);\r\n      } else {\r\n\r\n        this.id = setTimeout(() => {\r\n          const [barOneIndex, newHeight] = animations[i];\r\n          const barOneStyle = arrayValueBars[barOneIndex].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 25);\r\n      }\r\n\r\n      // if (i === animations.length - 1) {\r\n      //   setTimeout(() => {\r\n      //     arrayValueBars.forEach((eachBar) => {\r\n      //       eachBar.style.backgroundColor = 'green';\r\n      //       this.setState({ currentlySorting: false, arrayIsSorted: true });\r\n      //     });\r\n      //   }, i * 50);\r\n      // }\r\n    }\r\n  }\r\n\r\n  // sortingStatus() {\r\n  //   if (this.currentlySorting) {\r\n  //     return 'Currently sorting';\r\n  //   } else if (this.state.arrayIsSorted) {\r\n  //     return 'Sorted';\r\n  //   } else {\r\n  //     return 'Not sorted';\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className='mainContainer'>\r\n        <div className='visualizationDisplay'>\r\n          <div className='legend'>The height of the bars = numbers in the generated array</div>\r\n          <div className='arrayContainer'>\r\n            {array.map((value, index) => <div className='arrayValueBar' key={index} style={{ height: `${value}px` }}></div>)}\r\n          </div>\r\n          <div className='buttonContainer'>\r\n            <button className='resetArrayButton' onClick={() => this.resetArray()}>Reset array</button>\r\n            <button className='visualizeSortButton' onClick={() => this.mergeSortVisualizer()}>Visualize merge sort</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From stack overflow\r\nconst randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) * 1.5);\r\n","/* eslint-disable indent */\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport './viewAlgorithm.css';\r\nimport SortingVisualizer from '../Sorting-Visualizer/sortingVisualizer';\r\n\r\nexport default class ViewAlgorithm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // this.resetArray();\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    // const { array } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <nav className=\"algoDetailsNavbar\">\r\n          <button className=\"backButton\" disabled><svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M4.76562 7.8125L1.95312 5L4.76562 2.1875\" stroke=\"black\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n            <path d=\"M2.34375 5H8.04688\" stroke=\"black\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n          </svg><span>&nbsp; Back (other algorithms coming soon)</span></button>\r\n        </nav>\r\n        <div className=\"algorithmDetails\">\r\n\r\n          <main>\r\n            <div className=\"algorithmName\">{this.props.algorithmName}</div>\r\n            <section className=\"visualizationPanel\">\r\n              <SortingVisualizer />\r\n            </section>\r\n            <section className=\"algorithmInfo\">\r\n              <div className=\"conceptualOverview\">\r\n                <div className=\"title\">Conceptual overview</div>\r\n                <div className=\"details\">This algorithm takes in an array of numbers which are placed in any order and returns an array of those same numbers sorted in a non-decreasing order. This is done by recursively splitting the array (and consequently, each sub-array) into two parts, arranging the elements of each array in an increasing order while merging both sub-arrays into one array, and then finally returning the resulting array. <span className='extraInfo'><p>The 'merge' step is the crucial part of the algorithm that does most of the 'sorting' work in order to produce the array containing the result. While both sub-arrays are not empty, it keeps updating the result array with items from each sub array until all items in both arrays have been placed in the result array.</p> <p>How does it know which of the items from the sub array to place in the resulting array? The algorithm simply compares the items located at the leftmost index of each sub-array, selects the smaller one, and places it into the result array, and this process continues till the content of both sub arrays have been filled into the result array and the function returns to a higher level in the recursive tree until it gets to the top level of the recursive calls at which point the array is completely sorted. This works because each sub array is always sorted before it is merged. </p></span><p>The merge sort algorithm can be visualized by clicking the button above. Notice how each smaller subset of the whole array is divided into two parts and merged in a way that the items are arranged in an increasing order from left to right.</p></div>\r\n              </div>\r\n              <div className=\"complexity\">\r\n                <div className=\"title\">Complexity</div>\r\n                <div className=\"details\">O(nlogn) time and O(nlogn) space</div>\r\n              </div>\r\n            </section>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n{/* <Switch>\r\n              <Route\r\n                exact\r\n                path={'/sorting-algorithms'}\r\n                render={() => <SortingVisualizer />}\r\n              />\r\n            </Switch> */}\r\n","/* eslint-disable indent */\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ViewAlgorithm from './components/View-Algorithm/viewAlgorithm';\r\n\r\n// import SortingVisualizer from './components/Sorting-Visualizer/sortingVisualizer';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ViewAlgorithm algorithmName=\"Merge Sort\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}