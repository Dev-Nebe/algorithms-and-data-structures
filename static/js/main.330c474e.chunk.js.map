{"version":3,"sources":["logo.svg","Algorithms/mergeSort.js","components/Sorting-Visualizer/sortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","merge","mainArray","p","q","r","auxiliaryArray","animations","k","i","j","animation","comparison","swap","push","mergeSort","array","console","log","length","slice","mergeSortHelper","Math","floor","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","newAnimations","arrayValueBars","document","querySelectorAll","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","onClick","mergeSortVisualizer","map","value","index","key","Component","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.330c474e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable indent */\r\nconst mergeSortHelper = (mainArray, p, r, auxiliaryArray, animations) => {\r\n  if (p !== r) {\r\n    // Divide\r\n    const q = Math.floor((p + r) / 2);\r\n\r\n    // Conquer\r\n    mergeSortHelper(auxiliaryArray, p, q, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, q + 1, r, mainArray, animations);\r\n\r\n    // Merge\r\n    merge(mainArray, p, q, r, auxiliaryArray, animations);\r\n\r\n    // console.log(array);\r\n  }\r\n  return animations;\r\n};\r\n\r\nconst mergeSort = (array) => {\r\n  console.log('running merge sort');\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n};\r\n\r\nconst merge = (mainArray, p, q, r, auxiliaryArray, animations) => {\r\n  // let lowHalf = [];\r\n  // let highHalf = [];\r\n  // let k = p;\r\n  //\r\n  // for (let i = 0; k <= q; i++, k++) {\r\n  //     lowHalf[i] = array[k];\r\n  // }\r\n  // for (let j = 0; k <= r; j++, k++) {\r\n  //     highHalf[j] = array[k];\r\n  // }\r\n\r\n  let k = p;\r\n  let i = p;\r\n  let j = q + 1;\r\n\r\n\r\n  while (i <= q && j <= r) {\r\n    const animation = {};\r\n    animation.comparison = [i, j];\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animation.swap = [k, i];\r\n      mainArray[k] = mainArray[i];\r\n      i += 1;\r\n    } else {\r\n      animation.swap = [k, j];\r\n      mainArray[k] = mainArray[j];\r\n      j += 1;\r\n    }\r\n    k += 1;\r\n    animations.push(animation);\r\n  }\r\n\r\n  while (i < q) {\r\n    animations.push({\r\n      comparison: [i, i],\r\n      swap: [k, i]\r\n    });\r\n    mainArray[k] = auxiliaryArray[i];\r\n    i += 1;\r\n    k += 1;\r\n  }\r\n\r\n  while (j < r) {\r\n    animations.push({\r\n      comparison: [j, j],\r\n      swap: [k, j]\r\n    });\r\n    mainArray[k] = auxiliaryArray[j];\r\n    j += 1;\r\n    k += 1;\r\n  }\r\n\r\n  return animations;\r\n};\r\n\r\nexport default mergeSort;\r\n","/* eslint-disable indent */\r\nimport React, { Component } from 'react';\r\nimport mergeSort from '../../Algorithms/mergeSort';\r\nimport './sortingVisualizer.css';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 70; i++) {\r\n      array.push(randomIntFromInterval(10, 200));\r\n    }\r\n    this.setState({ array });\r\n    console.log(array);\r\n  }\r\n\r\n  mergeSortVisualizer() {\r\n    const animations = mergeSort(this.state.array);\r\n    const newAnimations = [];\r\n    for (const animation of animations) {\r\n      newAnimations.push(animation.comparison);\r\n      newAnimations.push(animation.comparison);\r\n      newAnimations.push(animation.swap);\r\n    }\r\n\r\n    for (let i = 0; i < newAnimations.length; i++) {\r\n      const arrayValueBars = document.querySelectorAll('.arrayValueBar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIndex, barTwoIndex] = newAnimations[i];\r\n        const barOneStyle = arrayValueBars[barOneIndex].style;\r\n        const barTwoStyle = arrayValueBars[barTwoIndex].style;\r\n        const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 5);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIndex, newHeight] = newAnimations[i];\r\n          const barOneStyle = arrayValueBars[barOneIndex].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className='buttonContainer'>\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.mergeSortVisualizer()}>Merge Sort</button>\r\n        </div>\r\n\r\n        <div className='arrayContainer'>\r\n          {array.map((value, index) => <div className='arrayValueBar' key={index} style={{ height: `${value}px` }}></div>)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From stack overflow\r\nconst randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) * 2);\r\n","/* eslint-disable indent */\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SortingVisualizer from './components/Sorting-Visualizer/sortingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}