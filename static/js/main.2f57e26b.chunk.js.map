{"version":3,"sources":["logo.svg","Algorithms/mergeSort.js","components/Sorting-Visualizer/sortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","merge","mainArray","p","q","r","auxiliaryArray","animations","k","i","j","push","mergeSort","array","length","slice","mergeSortHelper","Math","floor","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayValueBars","document","querySelectorAll","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","onClick","mergeSortVisualizer","map","value","index","key","Component","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f57e26b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","const mergeSortHelper = (mainArray, p, r, auxiliaryArray, animations) => {\r\n\tif (p !== r) {\r\n\t\t// Divide\r\n\t\tconst q = Math.floor((p + r) / 2);\r\n\r\n\t\t// Conquer\r\n\t\tmergeSortHelper(auxiliaryArray, p, q, mainArray, animations);\r\n\t\tmergeSortHelper(auxiliaryArray, q + 1, r, mainArray, animations);\r\n\r\n\t\t// Merge\r\n\t\tmerge(mainArray, p, q, r, auxiliaryArray, animations);\r\n\r\n\t\t// console.log(array);\r\n\t}\r\n\treturn;\r\n};\r\n\r\nconst mergeSort = (array) => {\r\n\t// console.log('running merge sort');\r\n\tconst animations = [];\r\n\tif (array.length <= 1) return array;\r\n\tconst auxiliaryArray = array.slice();\r\n\tmergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\treturn animations;\r\n};\r\n\r\nconst merge = (mainArray, p, q, r, auxiliaryArray, animations) => {\r\n\t// let lowHalf = [];\r\n\t// let highHalf = [];\r\n\t// let k = p;\r\n\t//\r\n\t// for (let i = 0; k <= q; i++, k++) {\r\n\t//     lowHalf[i] = array[k];\r\n\t// }\r\n\t// for (let j = 0; k <= r; j++, k++) {\r\n\t//     highHalf[j] = array[k];\r\n\t// }\r\n\r\n\tlet k = p;\r\n\tlet i = p;\r\n\tlet j = q + 1;\r\n\r\n\r\n\twhile (i <= q && j <= r) {\r\n\t\tanimations.push([i, j]);\r\n\t\tanimations.push([i, j]);\r\n\t\tif (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n\t\t\tanimations.push([k, auxiliaryArray[i]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t\t} else {\r\n\t\t\tanimations.push([k, auxiliaryArray[j]]);\r\n\t\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t\t}\r\n\t}\r\n\r\n\twhile (i <= q) {\r\n\t\tanimations.push([i, i]);\r\n\t\tanimations.push([i, i]);\r\n\t\tanimations.push([k, auxiliaryArray[i]]);\r\n\t\tmainArray[k++] = auxiliaryArray[i++];\r\n\t}\r\n\r\n\twhile (j <= r) {\r\n\t\tanimations.push([j, j]);\r\n\t\tanimations.push([j, j]);\r\n\t\tanimations.push([k, auxiliaryArray[j]]);\r\n\t\tmainArray[k++] = auxiliaryArray[j++];\r\n\t}\r\n};\r\n\r\nexport default mergeSort;\r\n","/* eslint-disable indent */\r\nimport React, { Component } from 'react';\r\nimport mergeSort from '../../Algorithms/mergeSort';\r\nimport './sortingVisualizer.css';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 80; i++) {\r\n      array.push(randomIntFromInterval(15, 200));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSortVisualizer() {\r\n    const animations = mergeSort(this.state.array);\r\n    // const newAnimations = [];\r\n    // for (const animation of animations) {\r\n    //   newAnimations.push(animation.comparison);\r\n    //   newAnimations.push(animation.comparison);\r\n    //   newAnimations.push(animation.swap);\r\n    // }\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayValueBars = document.querySelectorAll('.arrayValueBar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayValueBars[barOneIndex].style;\r\n        const barTwoStyle = arrayValueBars[barTwoIndex].style;\r\n        const color = i % 3 === 0 ? 'red' : 'turquoise';\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIndex, newHeight] = animations[i];\r\n          const barOneStyle = arrayValueBars[barOneIndex].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * 50);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className='buttonContainer'>\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.mergeSortVisualizer()}>Merge Sort</button>\r\n        </div>\r\n\r\n        <div className='arrayContainer'>\r\n          {array.map((value, index) => <div className='arrayValueBar' key={index} style={{ height: `${value}px` }}></div>)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From stack overflow\r\nconst randomIntFromInterval = (min, max) => Math.floor(Math.random() * (max - min + 1) * 2);\r\n","/* eslint-disable indent */\r\nimport React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SortingVisualizer from './components/Sorting-Visualizer/sortingVisualizer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}